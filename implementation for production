warning: in the working copy of 'STRIPE_SETUP_README.md', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'app/purchase/success.tsx', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'components/PaywallScreen.tsx', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'src/lib/api.ts', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'src/lib/payments.ts', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'src/state/subscription.tsx', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/CHECKOUT_TESTING.md b/CHECKOUT_TESTING.md[m
[1mindex b338c1f1..d6a89655 100644[m
[1m--- a/CHECKOUT_TESTING.md[m
[1m+++ b/CHECKOUT_TESTING.md[m
[36m@@ -86,3 +86,4 @@[m [mFrontend logs will show:[m
 - No popup blockers - direct navigation preserves user gesture[m
 - Mobile-friendly with responsive design[m
 - Minimal console logging in production[m
[41m+[m
[1mdiff --git a/DEPLOYMENT_CHECKLIST.md b/DEPLOYMENT_CHECKLIST.md[m
[1mindex d37919da..7e02649f 100644[m
[1m--- a/DEPLOYMENT_CHECKLIST.md[m
[1m+++ b/DEPLOYMENT_CHECKLIST.md[m
[36m@@ -81,3 +81,4 @@[m [mIf needed:[m
 2. Or revert the commit: `git revert <commit-hash>`[m
 [m
 [m
[41m+[m
[1mdiff --git a/DIAGNOSTIC_REPORT.md b/DIAGNOSTIC_REPORT.md[m
[1mindex d54726fe..4bbe14a7 100644[m
[1m--- a/DIAGNOSTIC_REPORT.md[m
[1m+++ b/DIAGNOSTIC_REPORT.md[m
[36m@@ -88,3 +88,4 @@[m [mAfter these changes:[m
 - âœ… No more questionnaire screen in production[m
 [m
 [m
[41m+[m
[1mdiff --git a/STRIPE_IMPLEMENTATION.md b/STRIPE_IMPLEMENTATION.md[m
[1mindex 045b27ff..4a04f7ba 100644[m
[1m--- a/STRIPE_IMPLEMENTATION.md[m
[1m+++ b/STRIPE_IMPLEMENTATION.md[m
[36m@@ -110,3 +110,4 @@[m [mLook for these logs in DevTools:[m
 - RevenueCat integration remains untouched[m
 [m
 [m
[41m+[m
[1mdiff --git a/app/config.web.ts b/app/config.web.ts[m
[1mindex 869ae15f..4c8b8b76 100644[m
[1m--- a/app/config.web.ts[m
[1m+++ b/app/config.web.ts[m
[36m@@ -50,3 +50,4 @@[m [mexport default webConfig;[m
 [m
 [m
 [m
[41m+[m
[1mdiff --git a/app/purchase/cancel.tsx b/app/purchase/cancel.tsx[m
[1mindex 7121e766..e4971f76 100644[m
[1m--- a/app/purchase/cancel.tsx[m
[1m+++ b/app/purchase/cancel.tsx[m
[36m@@ -123,3 +123,4 @@[m [mconst styles = StyleSheet.create({[m
 [m
 [m
 [m
[41m+[m
[1mdiff --git a/app/purchase/success.tsx b/app/purchase/success.tsx[m
[1mindex face2a5b..c66f9a23 100644[m
[1m--- a/app/purchase/success.tsx[m
[1m+++ b/app/purchase/success.tsx[m
[36m@@ -5,6 +5,7 @@[m [mimport { LinearGradient } from "expo-linear-gradient";[m
 import { CheckCircle, Home, RefreshCw } from "lucide-react-native";[m
 import { getIdentity } from "../../src/lib/identity";[m
 import { getSubscriptionStatus } from "../../src/lib/api";[m
[32m+[m[32mimport { USE_PAYMENT_LINKS } from "../../src/lib/payments";[m
 [m
 export default function PurchaseSuccess() {[m
   const router = useRouter();[m
[36m@@ -16,6 +17,15 @@[m [mexport default function PurchaseSuccess() {[m
     const checkSubscriptionStatus = async () => {[m
       try {[m
         setLoading(true);[m
[32m+[m[41m        [m
[32m+[m[32m        // Skip subscription check when Payment Links are enabled[m
[32m+[m[32m        if (USE_PAYMENT_LINKS) {[m
[32m+[m[32m          console.log('[Stripe] Payment Links enabled, skipping subscription status check');[m
[32m+[m[32m          setIsPremium(false);[m
[32m+[m[32m          setLoading(false);[m
[32m+[m[32m          return;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
         const identity = await getIdentity();[m
         if (identity.userId) {[m
           console.log('[Stripe] Checking subscription status for userId:', identity.userId);[m
[1mdiff --git a/app/success/page.tsx b/app/success/page.tsx[m
[1mindex cf169501..2a65b417 100644[m
[1m--- a/app/success/page.tsx[m
[1m+++ b/app/success/page.tsx[m
[36m@@ -20,3 +20,4 @@[m [mexport default function SuccessPage() {[m
     </main>[m
   );[m
 }[m
[41m+[m
[1mdiff --git a/components/PayButton.tsx b/components/PayButton.tsx[m
[1mindex 6062a38e..84c29487 100644[m
[1m--- a/components/PayButton.tsx[m
[1m+++ b/components/PayButton.tsx[m
[36m@@ -1,6 +1,7 @@[m
 import React, { useState } from 'react';[m
[31m-import { TouchableOpacity, Text, ActivityIndicator, StyleSheet, View } from 'react-native';[m
[32m+[m[32mimport { TouchableOpacity, Text, ActivityIndicator, StyleSheet, View, Alert } from 'react-native';[m
 import { createCheckoutSession } from '../src/lib/api';[m
[32m+[m[32mimport { USE_PAYMENT_LINKS, goToPayment, getPaymentUrl } from '../src/lib/payments';[m
 [m
 interface PayButtonProps {[m
   plan?: 'monthly' | 'annual';[m
[36m@@ -24,6 +25,15 @@[m [mexport function PayButton({[m
   const onPay = async () => {[m
     if (loading || disabled) return;[m
     [m
[32m+[m[32m    // Use Payment Links when enabled[m
[32m+[m[32m    if (USE_PAYMENT_LINKS) {[m
[32m+[m[32m      const ok = goToPayment(plan);[m
[32m+[m[32m      if (!ok) {[m
[32m+[m[32m        Alert.alert('Error', 'Payment link is not configured. Please try again later.');[m
[32m+[m[32m      }[m
[32m+[m[32m      return;[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
     setLoading(true);[m
     try {[m
       const { url, id } = await createCheckoutSession({ plan });[m
[36m@@ -160,3 +170,4 @@[m [mconst styles = StyleSheet.create({[m
 });[m
 [m
 export default PayButton;[m
[41m+[m
[1mdiff --git a/components/PaywallScreen.tsx b/components/PaywallScreen.tsx[m
[1mindex 8f2a8798..ef5d80d9 100644[m
[1m--- a/components/PaywallScreen.tsx[m
[1m+++ b/components/PaywallScreen.tsx[m
[36m@@ -28,12 +28,9 @@[m [mimport Animated, {[m
 } from 'react-native-reanimated';[m
 import * as WebBrowser from 'expo-web-browser';[m
 import { createLemonSqueezyCheckout, getProducts, API_BASE, getSubscriptionStatus, assertApiReachable, WEB_ORIGIN } from '../src/lib/api';[m
[31m-import { goToPayment, USE_PAYMENT_LINKS } from '../src/lib/payments';[m
[32m+[m[32mimport { goToPayment, USE_PAYMENT_LINKS, getPaymentUrl } from '../src/lib/payments';[m
 import { getIdentity, setUserEmail } from '../src/lib/identity';[m
 [m
[31m-// TEMPORARY: Force Payment Links to eliminate legacy /api/checkout calls[m
[31m-const ALWAYS_PAYMENT_LINKS = true;[m
[31m-[m
 const { width, height } = Dimensions.get('window');[m
 [m
 interface PricingOption {[m
[36m@@ -124,6 +121,11 @@[m [mexport default function PaywallScreen({[m
   const pulseAnimation = useSharedValue(1);[m
   const glowAnimation = useSharedValue(0);[m
 [m
[32m+[m[32m  // Memoized computed values for Payment Links[m
[32m+[m[32m  const monthlyUrl = useMemo(() => getPaymentUrl('monthly'), []);[m
[32m+[m[32m  const annualUrl = useMemo(() => getPaymentUrl('annual'), []);[m
[32m+[m[32m  const missingLinks = useMemo(() => USE_PAYMENT_LINKS && (!monthlyUrl || !annualUrl), [monthlyUrl, annualUrl]);[m
[32m+[m
   // Effect hooks[m
   useEffect(() => {[m
     if (visible) {[m
[36m@@ -152,7 +154,7 @@[m [mexport default function PaywallScreen({[m
         console.debug('[Paywall] Identity initialized:', identity);[m
         [m
         // Check subscription status (disabled when using Payment Links)[m
[31m-        if (identity.userId && !ALWAYS_PAYMENT_LINKS && !USE_PAYMENT_LINKS) {[m
[32m+[m[32m        if (identity.userId && !USE_PAYMENT_LINKS) {[m
           try {[m
             const status = await getSubscriptionStatus(identity.userId);[m
             console.debug('[Paywall] Subscription status:', status);[m
[36m@@ -296,7 +298,7 @@[m [mexport default function PaywallScreen({[m
     }[m
   }, [selectedOption, userEmail, userId, onPurchase]);[m
 [m
[31m-  // STRIPE: Handle Stripe subscription with Payment Links (legacy disabled)[m
[32m+[m[32m  // STRIPE: Handle Stripe subscription with Payment Links[m
   const handleStripeSubscribe = useCallback(async (plan: 'monthly' | 'annual') => {[m
     if (stripeLoading) return;[m
     [m
[36m@@ -311,9 +313,12 @@[m [mexport default function PaywallScreen({[m
       // Persist user email[m
       await setUserEmail(userEmail);[m
       [m
[31m-      // TEMPORARY: Always use Payment Links, legacy disabled[m
[31m-      if (ALWAYS_PAYMENT_LINKS || USE_PAYMENT_LINKS) {[m
[31m-        goToPayment(plan);[m
[32m+[m[32m      // Use Payment Links when enabled[m
[32m+[m[32m      if (USE_PAYMENT_LINKS) {[m
[32m+[m[32m        const ok = goToPayment(plan);[m
[32m+[m[32m        if (!ok) {[m
[32m+[m[32m          Alert.alert('Error', 'Payment link is not configured. Please try again later.');[m
[32m+[m[32m        }[m
         return;[m
       }[m
       [m
[36m@@ -469,8 +474,6 @@[m [mexport default function PaywallScreen({[m
                 <Text style={styles.sectionTitle}>Stripe Subscription</Text>[m
               </View>[m
 [m
[31m-              {/* Email Input */}[m
[31m-[m
               {/* Email Input */}[m
               <View style={styles.emailSection}>[m
                 <Text style={styles.emailLabel}>Email for subscription:</Text>[m
[36m@@ -486,21 +489,18 @@[m [mexport default function PaywallScreen({[m
                 />[m
               </View>[m
 [m
[31m-              {/* Debug UI - TEMPORARY */}[m
[31m-              <View style={styles.debugContainer}>[m
[31m-                <Text style={styles.debugText}>[m
[31m-                  USE_PAYMENT_LINKS: {USE_PAYMENT_LINKS ? 'true' : 'false'}[m
[31m-                </Text>[m
[31m-                <Text style={styles.debugText}>[m
[31m-                  Payment Links forced: {ALWAYS_PAYMENT_LINKS ? 'YES' : 'NO'}[m
[31m-                </Text>[m
[31m-              </View>[m
[32m+[m[32m              {/* Payment Links Status */}[m
[32m+[m[32m              {missingLinks && ([m
[32m+[m[32m                <View style={styles.statusContainer}>[m
[32m+[m[32m                  <Text style={styles.statusText}>Temporarily unavailable</Text>[m
[32m+[m[32m                </View>[m
[32m+[m[32m              )}[m
 [m
               <View style={styles.buttonContainer}>[m
                 <TouchableOpacity[m
                   style={[styles.button, styles.stripeButton]}[m
                   onPress={() => handleStripeSubscribe('monthly')}[m
[31m-                  disabled={!canSubscribe || stripeLoading}[m
[32m+[m[32m                  disabled={!canSubscribe || stripeLoading || missingLinks}[m
                   activeOpacity={0.8}[m
                 >[m
                   {stripeLoading ? ([m
[36m@@ -521,12 +521,11 @@[m [mexport default function PaywallScreen({[m
                 <TouchableOpacity[m
                   style={[styles.button, styles.stripeButton]}[m
                   onPress={() => handleStripeSubscribe('annual')}[m
[31m-                  disabled={!canSubscribe || stripeLoading}[m
[32m+[m[32m                  disabled={!canSubscribe || stripeLoading || missingLinks}[m
                   activeOpacity={0.8}[m
                 >[m
                   {stripeLoading ? ([m
[31m-[m
[31m-<>[m
[32m+[m[32m                    <>[m
                       <ActivityIndicator color="#ffffff" />[m
                       <Text style={[styles.buttonText, { marginLeft: 8 }]}>[m
                         {USE_PAYMENT_LINKS ? 'Redirectingâ€¦' : 'Openingâ€¦'}[m
[36m@@ -550,9 +549,12 @@[m [mexport default function PaywallScreen({[m
               <TouchableOpacity[m
                 style={[styles.purchaseButton, purchasing && styles.purchaseButtonDisabled]}[m
                 onPress={() => {[m
[31m-                  // TEMPORARY: Force Payment Links for all purchase buttons[m
[31m-                  if (ALWAYS_PAYMENT_LINKS || USE_PAYMENT_LINKS) {[m
[31m-                    goToPayment('monthly'); // Default to monthly[m
[32m+[m[32m                  // Use Payment Links when enabled[m
[32m+[m[32m                  if (USE_PAYMENT_LINKS) {[m
[32m+[m[32m                    const ok = goToPayment('monthly'); // Default to monthly[m
[32m+[m[32m                    if (!ok) {[m
[32m+[m[32m                      Alert.alert('Error', 'Payment link is not configured. Please try again later.');[m
[32m+[m[32m                    }[m
                     return;[m
                   }[m
                   handlePurchase();[m
[36m@@ -981,20 +983,6 @@[m [mconst styles = StyleSheet.create({[m
     backgroundColor: '#888888',[m
     marginHorizontal: 8,[m
   },[m
[31m-  debugContainer: {[m
[31m-    backgroundColor: 'rgba(255, 193, 7, 0.1)',[m
[31m-    borderRadius: 8,[m
[31m-    padding: 12,[m
[31m-    marginBottom: 16,[m
[31m-    borderWidth: 1,[m
[31m-    borderColor: 'rgba(255, 193, 7, 0.3)',[m
[31m-  },[m
[31m-  debugText: {[m
[31m-    fontSize: 12,[m
[31m-    color: '#FFC107',[m
[31m-    textAlign: 'center',[m
[31m-    marginBottom: 2,[m
[31m-    fontFamily: 'monospace',[m
[31m-  },[m
[32m+[m
 [m
 });[m
\ No newline at end of file[m
[1mdiff --git a/public/service-worker.js b/public/service-worker.js[m
[1mindex fc817080..a6923581 100644[m
[1m--- a/public/service-worker.js[m
[1m+++ b/public/service-worker.js[m
[36m@@ -3,3 +3,4 @@[m
 console.log('[SW] Empty service worker loaded - no functionality');[m
 [m
 [m
[41m+[m
[1mdiff --git a/scripts/write-build-info.mjs b/scripts/write-build-info.mjs[m
[1mindex ca3fd601..c103acdb 100644[m
[1m--- a/scripts/write-build-info.mjs[m
[1m+++ b/scripts/write-build-info.mjs[m
[36m@@ -12,3 +12,4 @@[m [mwriteFileSync("dist/build-info.json", JSON.stringify({ sha, branch, ts }, null,[m
 console.log("[build-info] wrote dist/build-info.json", { sha, branch, ts });[m
 [m
 [m
[41m+[m
[1mdiff --git a/services/stripeService.ts b/services/stripeService.ts[m
[1mindex 1092396b..47e95bac 100644[m
[1m--- a/services/stripeService.ts[m
[1m+++ b/services/stripeService.ts[m
[36m@@ -126,3 +126,4 @@[m [mexport default StripeService;[m
 [m
 [m
 [m
[41m+[m
[1mdiff --git a/src/lib/api.ts b/src/lib/api.ts[m
[1mindex acf2c804..e546b669 100644[m
[1m--- a/src/lib/api.ts[m
[1m+++ b/src/lib/api.ts[m
[36m@@ -1,6 +1,8 @@[m
 // Centralized API configuration with fallback warning[m
 let warned = false;[m
 [m
[32m+[m[32mimport { USE_PAYMENT_LINKS } from './payments';[m
[32m+[m
 export const API_BASE =[m
   process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/+$/, '') ||[m
   (() => {[m
[36m@@ -38,6 +40,10 @@[m [mexport async function assertApiReachable() {[m
 [m
 // New simplified checkout function for Stripe[m
 export async function createCheckoutSession(payload = {}) {[m
[32m+[m[32m  if (USE_PAYMENT_LINKS) {[m
[32m+[m[32m    throw new Error('Legacy checkout disabled when Payment Links are enabled');[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
   const res = await fetch(`${API_BASE}/api/checkout`, {[m
     method: 'POST',[m
     headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },[m
[36m@@ -50,6 +56,14 @@[m [mexport async function createCheckoutSession(payload = {}) {[m
 [m
 [m
 export async function getProducts() {[m
[32m+[m[32m  if (USE_PAYMENT_LINKS) {[m
[32m+[m[32m    // Return empty structure when Payment Links are enabled[m
[32m+[m[32m    return {[m
[32m+[m[32m      monthly: null,[m
[32m+[m[32m      annual: null[m
[32m+[m[32m    };[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
   try {[m
     const r = await fetch(apiUrl('/api/stripe/products'));[m
     if (!r.ok) {[m
[36m@@ -76,6 +90,10 @@[m [mexport async function getProducts() {[m
 }[m
 [m
 export async function createCheckout(plan: 'monthly' | 'annual') {[m
[32m+[m[32m  if (USE_PAYMENT_LINKS) {[m
[32m+[m[32m    throw new Error('Legacy checkout disabled when Payment Links are enabled');[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
   const res = await fetch(`${API_BASE}/api/checkout`, {[m
     method: 'POST',[m
     headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },[m
[36m@@ -133,6 +151,11 @@[m [mexport async function getSubscriptionStatus(userId: string): Promise<{[m
   plan?: "monthly"|"annual"; [m
   currentPeriodEnd?: number [m
 }> {[m
[32m+[m[32m  if (USE_PAYMENT_LINKS) {[m
[32m+[m[32m    // Return default status when Payment Links are enabled[m
[32m+[m[32m    return { active: false };[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
   const r = await fetch(apiUrl(`/api/subscription/status?userId=${encodeURIComponent(userId)}`));[m
   if (!r.ok) throw new Error(`HTTP ${r.status}: ${r.statusText}`);[m
   return await r.json();[m
[36m@@ -140,6 +163,10 @@[m [mexport async function getSubscri